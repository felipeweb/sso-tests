

# is the url for retrieve the openid configuration - normally the <server>/auth/realm/<realm_name>
discovery-url: http://172.16.52.165:8080/auth/realms/master
# the client id for the 'client' application
client-id: gatekeeper
# the secret associated to the 'client' application - note the client_secret is optional, required for
# oauth2 access_type=confidential i.e. the client is being verified
client-secret: test
# the interface definition you wish the proxy to listen, all interfaces is specified as ':<port>'
listen: 172.16.52.165:3000
# log all incoming requests
enable-logging: true
# log in json format
enable-json-logging: true
# should the access token be encrypted - you need an encryption-key if 'true'
enable-encrypted-token: false
# do not redirect the request, simple 307 it
no-redirects: false
# the location of a certificate you wish the proxy to use for TLS support
tls-cert:
# the location of a private key for TLS
tls-private-key:
# the public key for the ca, used for mutual TLS
tls-ca-certificate:
# the redirection url, essentially the site url, note: /oauth/callback is added at the end
redirection-url: http://172.16.52.165:3000
# the encryption key used to encode the session state
encryption-key: E62F5367F69FA8F73C38C975970D9E40
# the name of the access cookie, defaults to kc-access
cookie-access-name: test
# the name of the refresh cookie, default to kc-state
cookie-refresh-name: test
# the upstream endpoint which we should proxy request
upstream-url: http://secured:80
# upstream-keepalives specified wheather you want keepalive on the upstream endpoint
upstream-keepalives: true
# skip the tls verification of the upstream url
skip-upstream-tls-verify: false
# enables a more extra secuirty features
enable-security-filter: true
secure-cookie: false

scopes:
- openid
- profile
- idsfull
- offline_access

resources:
- uri: /secured
  methods:
    - GET
  roles:
    - client:test1
    - client:test2
  require-any-role: true
  groups:
    - admins
    - users

enable-refresh-tokens: true
